From 10d86c10d0e2e08dc9ade1f3ae2835a34c62f5b7 Mon Sep 17 00:00:00 2001
From: Shunkai Yao <yaoshunkai@google.com>
Date: Mon, 17 Feb 2025 19:54:47 +0000
Subject: [PATCH 29/37] libaudiohal: fix the device mask conversion

The EFFECT_CMD_SET_DEVICE command was not converted correctly for AIDL
Add a EffectHalInterface::setDevices method for AIDL to remove the
bitmask devices dependencies

Flag: EXEMPT bugfix
Bug: 380151062
Test: Spatializer on devices with HIDL and AIDL effect HAL
Test: atest EffectHalAidlTest
Google: 3529210
Change-Id: I45549b6bf46becde695fddc6e8636f1ed3f9177c
Merged-In: I45549b6bf46becde695fddc6e8636f1ed3f9177c
---
 media/libaudiohal/Android.bp                  |   2 +
 media/libaudiohal/impl/EffectHalAidl.cpp      |  22 ++
 media/libaudiohal/impl/EffectHalAidl.h        |   3 +
 media/libaudiohal/impl/EffectHalHidl.h        |   3 +
 .../impl/EffectsFactoryHalAidl.cpp            |  10 +-
 .../media/audiohal/EffectHalInterface.h       |   4 +
 media/libaudiohal/tests/Android.bp            |  11 +
 .../libaudiohal/tests/EffectHalAidl_test.cpp  | 352 ++++++++++++++++++
 services/audioflinger/Effects.cpp             |   5 +
 9 files changed, 408 insertions(+), 4 deletions(-)
 create mode 100644 media/libaudiohal/tests/EffectHalAidl_test.cpp

diff --git a/media/libaudiohal/Android.bp b/media/libaudiohal/Android.bp
index 74a64bf6d0..609db07184 100644
--- a/media/libaudiohal/Android.bp
+++ b/media/libaudiohal/Android.bp
@@ -31,6 +31,7 @@ cc_library_shared {
 
     shared_libs: [
         "audioclient-types-aidl-cpp",
+        "libaudiofoundation",
         "libbinder_ndk",
         "libdl",
         "libhidlbase",
@@ -75,6 +76,7 @@ cc_library_headers {
     name: "libaudiohal_headers",
 
     header_libs: [
+        "libaudiofoundation_headers",
         "libeffectsconfig_headers",
     ],
 
diff --git a/media/libaudiohal/impl/EffectHalAidl.cpp b/media/libaudiohal/impl/EffectHalAidl.cpp
index 658fc18bea..090ac8a580 100644
--- a/media/libaudiohal/impl/EffectHalAidl.cpp
+++ b/media/libaudiohal/impl/EffectHalAidl.cpp
@@ -19,6 +19,7 @@
 #define LOG_TAG "EffectHalAidl"
 //#define LOG_NDEBUG 0
 
+#include <algorithm>
 #include <memory>
 
 #include <audio_utils/primitives.h>
@@ -63,7 +64,9 @@ using ::aidl::android::hardware::audio::effect::kEventFlagDataMqNotEmpty;
 using ::aidl::android::hardware::audio::effect::kEventFlagDataMqUpdate;
 using ::aidl::android::hardware::audio::effect::kEventFlagNotEmpty;
 using ::aidl::android::hardware::audio::effect::kReopenSupportedVersion;
+using ::aidl::android::hardware::audio::effect::Parameter;
 using ::aidl::android::hardware::audio::effect::State;
+using ::aidl::android::media::audio::common::AudioDeviceDescription;
 
 namespace android {
 namespace effect {
@@ -388,5 +391,24 @@ status_t EffectHalAidl::dump(int fd) {
     return mEffect->dump(fd, nullptr, 0);
 }
 
+status_t EffectHalAidl::setDevices(const AudioDeviceTypeAddrVector& deviceTypes) {
+    TIME_CHECK();
+
+    // TODO: b/397236443 - add this as part of effect dumpsys
+    ALOGD("%s %s", __func__,
+          dumpAudioDeviceTypeAddrVector(deviceTypes, false /*includeSensitiveInfo*/).c_str());
+
+    std::vector<AudioDeviceDescription> deviceDescs;
+    for (const AudioDeviceTypeAddr& deviceType : deviceTypes) {
+        AudioDeviceDescription deviceDesc = VALUE_OR_RETURN_STATUS(
+                ::aidl::android::legacy2aidl_audio_devices_t_AudioDeviceDescription(
+                        deviceType.mType));
+        deviceDescs.emplace_back(std::move(deviceDesc));
+    }
+
+    return statusTFromBinderStatus(
+            mEffect->setParameter(Parameter::make<Parameter::deviceDescription>(deviceDescs)));
+}
+
 } // namespace effect
 } // namespace android
diff --git a/media/libaudiohal/impl/EffectHalAidl.h b/media/libaudiohal/impl/EffectHalAidl.h
index a775337d86..c420eed9a2 100644
--- a/media/libaudiohal/impl/EffectHalAidl.h
+++ b/media/libaudiohal/impl/EffectHalAidl.h
@@ -62,6 +62,9 @@ class EffectHalAidl : public EffectHalInterface {
         return mEffect;
     }
 
+    // Set devices in AIDL type
+    status_t setDevices(const AudioDeviceTypeAddrVector& deviceTypes);
+
     // for TIME_CHECK
     const std::string getClassName() const { return "EffectHalAidl"; }
 
diff --git a/media/libaudiohal/impl/EffectHalHidl.h b/media/libaudiohal/impl/EffectHalHidl.h
index dda21ed2cf..a70df4a3b1 100644
--- a/media/libaudiohal/impl/EffectHalHidl.h
+++ b/media/libaudiohal/impl/EffectHalHidl.h
@@ -63,6 +63,9 @@ class EffectHalHidl : public EffectHalInterface, public EffectConversionHelperHi
 
     uint64_t effectId() const { return mEffectId; }
 
+    // Not implemented in HIDL effect HAL
+    status_t setDevices(const AudioDeviceTypeAddrVector&) { return INVALID_OPERATION; };
+
   private:
     friend class EffectsFactoryHalHidl;
     typedef MessageQueue<Result, hardware::kSynchronizedReadWrite> StatusMQ;
diff --git a/media/libaudiohal/impl/EffectsFactoryHalAidl.cpp b/media/libaudiohal/impl/EffectsFactoryHalAidl.cpp
index ac69b267da..8923f48f37 100644
--- a/media/libaudiohal/impl/EffectsFactoryHalAidl.cpp
+++ b/media/libaudiohal/impl/EffectsFactoryHalAidl.cpp
@@ -49,7 +49,6 @@ using ::aidl::android::media::audio::common::AudioDeviceAddress;
 using ::aidl::android::media::audio::common::AudioSource;
 using ::aidl::android::media::audio::common::AudioStreamType;
 using ::aidl::android::media::audio::common::AudioUuid;
-using ::android::audio::utils::toString;
 using ::android::base::unexpected;
 using ::android::detail::AudioHalVersionInfo;
 
@@ -200,7 +199,8 @@ status_t EffectsFactoryHalAidl::createEffect(const effect_uuid_t* uuid, int32_t
                 statusTFromBinderStatus(mFactory->createEffect(aidlUuid, &aidlEffect)));
     }
     if (aidlEffect == nullptr) {
-        ALOGE("%s failed to create effect with UUID: %s", __func__, toString(aidlUuid).c_str());
+        ALOGE("%s failed to create effect with UUID: %s", __func__,
+              ::android::audio::utils::toString(aidlUuid).c_str());
         return NAME_NOT_FOUND;
     }
     Descriptor desc;
@@ -239,7 +239,8 @@ status_t EffectsFactoryHalAidl::getHalDescriptorWithImplUuid(const AudioUuid& uu
     auto matchIt = std::find_if(list.begin(), list.end(),
                                 [&](const auto& desc) { return desc.common.id.uuid == uuid; });
     if (matchIt == list.end()) {
-        ALOGE("%s UUID not found in HAL and proxy list %s", __func__, toString(uuid).c_str());
+        ALOGE("%s UUID not found in HAL and proxy list %s", __func__,
+              ::android::audio::utils::toString(uuid).c_str());
         return NAME_NOT_FOUND;
     }
 
@@ -260,7 +261,8 @@ status_t EffectsFactoryHalAidl::getHalDescriptorWithTypeUuid(
     std::copy_if(mProxyDescList.begin(), mProxyDescList.end(), std::back_inserter(result),
                  [&](auto& desc) { return desc.common.id.type == type; });
     if (result.empty()) {
-        ALOGW("%s UUID type not found in HAL and proxy list %s", __func__, toString(type).c_str());
+        ALOGW("%s UUID type not found in HAL and proxy list %s", __func__,
+              ::android::audio::utils::toString(type).c_str());
         return BAD_VALUE;
     }
 
diff --git a/media/libaudiohal/include/media/audiohal/EffectHalInterface.h b/media/libaudiohal/include/media/audiohal/EffectHalInterface.h
index cf8d7f048e..9fdcd67824 100644
--- a/media/libaudiohal/include/media/audiohal/EffectHalInterface.h
+++ b/media/libaudiohal/include/media/audiohal/EffectHalInterface.h
@@ -18,6 +18,7 @@
 #define ANDROID_HARDWARE_EFFECT_HAL_INTERFACE_H
 
 #include <media/audiohal/EffectBufferHalInterface.h>
+#include <media/AudioDeviceTypeAddr.h>
 #include <system/audio_effect.h>
 #include <utils/Errors.h>
 #include <utils/RefBase.h>
@@ -54,6 +55,9 @@ class EffectHalInterface : public RefBase
 
     virtual status_t dump(int fd) = 0;
 
+    // Only implemented in AIDL effect HAL: set a vector of AudioDeviceTypeAddr
+    virtual status_t setDevices(const AudioDeviceTypeAddrVector& deviceTypes) = 0;
+
   protected:
     // Subclasses can not be constructed directly by clients.
     EffectHalInterface() = default;
diff --git a/media/libaudiohal/tests/Android.bp b/media/libaudiohal/tests/Android.bp
index f6a7eeaca2..e369d8b1e0 100644
--- a/media/libaudiohal/tests/Android.bp
+++ b/media/libaudiohal/tests/Android.bp
@@ -76,3 +76,14 @@ cc_test {
     header_libs: ["libaudiohalimpl_headers"],
     static_libs: ["libgmock"],
 }
+
+cc_test {
+    name: "EffectHalAidlTest",
+    srcs: [
+        ":audio_effect_hal_aidl_src_files",
+        "EffectHalAidl_test.cpp",
+    ],
+    defaults: ["libaudiohal_aidl_test_default"],
+    header_libs: ["libaudiohalimpl_headers"],
+    static_libs: ["libgmock"],
+}
diff --git a/media/libaudiohal/tests/EffectHalAidl_test.cpp b/media/libaudiohal/tests/EffectHalAidl_test.cpp
new file mode 100644
index 0000000000..4d4209bc8a
--- /dev/null
+++ b/media/libaudiohal/tests/EffectHalAidl_test.cpp
@@ -0,0 +1,352 @@
+/*
+ * Copyright 2025 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "EffectHalAidlTest"
+
+#include "EffectHalAidl.h"
+
+#include <aidl/android/hardware/audio/effect/BnEffect.h>
+#include <aidl/android/hardware/audio/effect/BnFactory.h>
+
+#include <aidl/android/hardware/audio/effect/Parameter.h>
+#include <android/binder_status.h>
+#include <media/AudioDeviceTypeAddr.h>
+#include <utils/Log.h>
+
+#include <gmock/gmock.h>
+#include <gtest/gtest.h>
+#include <utility>
+#include <vector>
+
+namespace {
+
+using ::aidl::android::hardware::audio::effect::CommandId;
+using ::aidl::android::hardware::audio::effect::Descriptor;
+using ::aidl::android::hardware::audio::effect::IEffect;
+using ::aidl::android::hardware::audio::effect::Parameter;
+using ::aidl::android::hardware::audio::effect::Processing;
+using ::aidl::android::hardware::audio::effect::State;
+using ::aidl::android::media::audio::common::AudioDeviceDescription;
+using ::aidl::android::media::audio::common::AudioDeviceType;
+using ::aidl::android::media::audio::common::AudioUuid;
+using android::AudioDeviceTypeAddr;
+using android::AudioDeviceTypeAddrVector;
+using android::OK;
+using android::sp;
+using android::effect::EffectHalAidl;
+
+using ::testing::_;
+using ::testing::Return;
+
+class IFactoryMock : public ::aidl::android::hardware::audio::effect::BnFactory {
+  public:
+    IFactoryMock() = default;
+
+    ndk::ScopedAStatus queryEffects(const std::optional<AudioUuid>&,
+                                    const std::optional<AudioUuid>&,
+                                    const std::optional<AudioUuid>&,
+                                    std::vector<Descriptor>*) override {
+        return ndk::ScopedAStatus::ok();
+    }
+
+    ndk::ScopedAStatus queryProcessing(const std::optional<Processing::Type>&,
+                                       std::vector<Processing>*) override {
+        return ndk::ScopedAStatus::ok();
+    }
+
+    ndk::ScopedAStatus createEffect(const AudioUuid&, std::shared_ptr<IEffect>*) override {
+        return ndk::ScopedAStatus::ok();
+    }
+
+    ndk::ScopedAStatus destroyEffect(const std::shared_ptr<IEffect>&) override {
+        return ndk::ScopedAStatus::ok();
+    }
+};
+
+class IEffectMock : public ::aidl::android::hardware::audio::effect::BnEffect {
+  public:
+    IEffectMock() = default;
+
+    MOCK_METHOD(ndk::ScopedAStatus, open,
+                (const Parameter::Common& common, const std::optional<Parameter::Specific>& spec,
+                 IEffect::OpenEffectReturn* ret),
+                (override));
+    MOCK_METHOD(ndk::ScopedAStatus, close, (), (override));
+    MOCK_METHOD(ndk::ScopedAStatus, getDescriptor, (Descriptor * desc), (override));
+    MOCK_METHOD(ndk::ScopedAStatus, command, (CommandId commandId), (override));
+    MOCK_METHOD(ndk::ScopedAStatus, getState, (State * state), (override));
+    MOCK_METHOD(ndk::ScopedAStatus, getParameter, (const Parameter::Id& id, Parameter* param),
+                (override));
+    MOCK_METHOD(ndk::ScopedAStatus, reopen, (IEffect::OpenEffectReturn * ret), (override));
+
+    ndk::ScopedAStatus setParameter(const Parameter& param) {
+        if (param == expectParam)
+            return ndk::ScopedAStatus::ok();
+        else {
+            ALOGW("%s mismatch, %s vs %s", __func__, param.toString().c_str(),
+                  expectParam.toString().c_str());
+            return ndk::ScopedAStatus::fromStatus(STATUS_BAD_VALUE);
+        }
+    }
+
+    void setExpectParameter(const Parameter& param) { expectParam = param; }
+
+  private:
+    Parameter expectParam;
+};
+
+// Predefined vector of {audio_devices_t, AudioDeviceDescription} pair
+static const std::vector<std::pair<audio_devices_t, AudioDeviceDescription>>& kAudioDevicePairs = {
+        {AUDIO_DEVICE_NONE, AudioDeviceDescription{.type = AudioDeviceType::NONE}},
+        {AUDIO_DEVICE_OUT_EARPIECE,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_SPEAKER_EARPIECE}},
+        {AUDIO_DEVICE_OUT_SPEAKER, AudioDeviceDescription{.type = AudioDeviceType::OUT_SPEAKER}},
+        {AUDIO_DEVICE_OUT_WIRED_HEADPHONE,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_HEADPHONE,
+                                .connection = AudioDeviceDescription::CONNECTION_ANALOG}},
+        {AUDIO_DEVICE_OUT_BLUETOOTH_SCO,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_SCO}},
+        {AUDIO_DEVICE_OUT_BLUETOOTH_SCO_CARKIT,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_CARKIT,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_SCO}},
+        {AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_HEADPHONE,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_A2DP}},
+        {AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_SPEAKER,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_A2DP}},
+        {AUDIO_DEVICE_OUT_TELEPHONY_TX,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_TELEPHONY_TX}},
+        {AUDIO_DEVICE_OUT_AUX_LINE, AudioDeviceDescription{.type = AudioDeviceType::OUT_LINE_AUX}},
+        {AUDIO_DEVICE_OUT_SPEAKER_SAFE,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_SPEAKER_SAFE}},
+        {AUDIO_DEVICE_OUT_HEARING_AID,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_HEARING_AID,
+                                .connection = AudioDeviceDescription::CONNECTION_WIRELESS}},
+        {AUDIO_DEVICE_OUT_ECHO_CANCELLER,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_ECHO_CANCELLER}},
+        {AUDIO_DEVICE_OUT_BLE_SPEAKER,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_SPEAKER,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_LE}},
+        {AUDIO_DEVICE_OUT_BLE_BROADCAST,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_BROADCAST,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_LE}},
+        {AUDIO_DEVICE_OUT_MULTICHANNEL_GROUP,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_MULTICHANNEL_GROUP,
+                                .connection = AudioDeviceDescription::CONNECTION_VIRTUAL}},
+
+        {AUDIO_DEVICE_OUT_DEFAULT, AudioDeviceDescription{.type = AudioDeviceType::OUT_DEFAULT}},
+        {AUDIO_DEVICE_OUT_WIRED_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_HEADSET,
+                                .connection = AudioDeviceDescription::CONNECTION_ANALOG}},
+        {AUDIO_DEVICE_OUT_BLUETOOTH_SCO_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_HEADSET,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_SCO}},
+        {AUDIO_DEVICE_OUT_HDMI,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_HDMI}},
+        {AUDIO_DEVICE_OUT_ANLG_DOCK_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DOCK,
+                                .connection = AudioDeviceDescription::CONNECTION_ANALOG}},
+        {AUDIO_DEVICE_OUT_DGTL_DOCK_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DOCK,
+                                .connection = AudioDeviceDescription::CONNECTION_USB}},
+        {AUDIO_DEVICE_OUT_USB_ACCESSORY,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_ACCESSORY,
+                                .connection = AudioDeviceDescription::CONNECTION_USB}},
+        {AUDIO_DEVICE_OUT_USB_DEVICE,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_USB}},
+        {AUDIO_DEVICE_OUT_FM, AudioDeviceDescription{.type = AudioDeviceType::OUT_FM}},
+        {AUDIO_DEVICE_OUT_LINE,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_ANALOG}},
+        {AUDIO_DEVICE_OUT_SPDIF,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_SPDIF}},
+        {AUDIO_DEVICE_OUT_BLUETOOTH_A2DP,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_A2DP}},
+        {AUDIO_DEVICE_OUT_IP,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_IP_V4}},
+        {AUDIO_DEVICE_OUT_BUS, AudioDeviceDescription{.type = AudioDeviceType::OUT_BUS}},
+        {AUDIO_DEVICE_OUT_PROXY,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_AFE_PROXY,
+                                .connection = AudioDeviceDescription::CONNECTION_VIRTUAL}},
+        {AUDIO_DEVICE_OUT_USB_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_HEADSET,
+                                .connection = AudioDeviceDescription::CONNECTION_USB}},
+        {AUDIO_DEVICE_OUT_HDMI_ARC,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_HDMI_ARC}},
+        {AUDIO_DEVICE_OUT_HDMI_EARC,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_HDMI_EARC}},
+        {AUDIO_DEVICE_OUT_BLE_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_HEADSET,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_LE}},
+        {AUDIO_DEVICE_OUT_REMOTE_SUBMIX,
+         AudioDeviceDescription{.type = AudioDeviceType::OUT_SUBMIX,
+                                .connection = AudioDeviceDescription::CONNECTION_VIRTUAL}},
+        {AUDIO_DEVICE_IN_BUILTIN_MIC,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_MICROPHONE}},
+        {AUDIO_DEVICE_IN_BACK_MIC,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_MICROPHONE_BACK}},
+        {AUDIO_DEVICE_IN_TELEPHONY_RX,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_TELEPHONY_RX}},
+        {AUDIO_DEVICE_IN_TV_TUNER, AudioDeviceDescription{.type = AudioDeviceType::IN_TV_TUNER}},
+        {AUDIO_DEVICE_IN_LOOPBACK, AudioDeviceDescription{.type = AudioDeviceType::IN_LOOPBACK}},
+        {AUDIO_DEVICE_IN_BLUETOOTH_BLE,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_LE}},
+        {AUDIO_DEVICE_IN_ECHO_REFERENCE,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_ECHO_REFERENCE}},
+        {AUDIO_DEVICE_IN_DEFAULT, AudioDeviceDescription{.type = AudioDeviceType::IN_DEFAULT}},
+        {AUDIO_DEVICE_IN_WIRED_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_HEADSET,
+                                .connection = AudioDeviceDescription::CONNECTION_ANALOG}},
+        {AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_HEADSET,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_SCO}},
+        {AUDIO_DEVICE_IN_HDMI,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_HDMI}},
+        {AUDIO_DEVICE_IN_ANLG_DOCK_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DOCK,
+                                .connection = AudioDeviceDescription::CONNECTION_ANALOG}},
+        {AUDIO_DEVICE_IN_DGTL_DOCK_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DOCK,
+                                .connection = AudioDeviceDescription::CONNECTION_USB}},
+        {AUDIO_DEVICE_IN_USB_ACCESSORY,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_ACCESSORY,
+                                .connection = AudioDeviceDescription::CONNECTION_USB}},
+        {AUDIO_DEVICE_IN_USB_DEVICE,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_USB}},
+        {AUDIO_DEVICE_IN_FM_TUNER, AudioDeviceDescription{.type = AudioDeviceType::IN_FM_TUNER}},
+        {AUDIO_DEVICE_IN_LINE,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_ANALOG}},
+        {AUDIO_DEVICE_IN_SPDIF,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_SPDIF}},
+        {AUDIO_DEVICE_IN_BLUETOOTH_A2DP,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_A2DP}},
+        {AUDIO_DEVICE_IN_IP,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_IP_V4}},
+        {AUDIO_DEVICE_IN_BUS, AudioDeviceDescription{.type = AudioDeviceType::IN_BUS}},
+        {AUDIO_DEVICE_IN_PROXY,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_AFE_PROXY,
+                                .connection = AudioDeviceDescription::CONNECTION_VIRTUAL}},
+        {AUDIO_DEVICE_IN_USB_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_HEADSET,
+                                .connection = AudioDeviceDescription::CONNECTION_USB}},
+        {AUDIO_DEVICE_IN_HDMI_ARC,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_HDMI_ARC}},
+        {AUDIO_DEVICE_IN_HDMI_EARC,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_DEVICE,
+                                .connection = AudioDeviceDescription::CONNECTION_HDMI_EARC}},
+        {AUDIO_DEVICE_IN_BLE_HEADSET,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_HEADSET,
+                                .connection = AudioDeviceDescription::CONNECTION_BT_LE}},
+        {AUDIO_DEVICE_IN_REMOTE_SUBMIX,
+         AudioDeviceDescription{.type = AudioDeviceType::IN_SUBMIX,
+                                .connection = AudioDeviceDescription::CONNECTION_VIRTUAL}},
+};
+
+}  // namespace
+
+class EffectHalAidlTest : public testing::Test {
+  public:
+    void SetUp() override {
+        mIEffectMock = ndk::SharedRefBase::make<IEffectMock>();
+        mIFactoryMock = ndk::SharedRefBase::make<IFactoryMock>();
+        mEffect = sp<EffectHalAidl>::make(mIFactoryMock, mIEffectMock, 0 /*session*/, 0 /*ioId*/,
+                                          mDescMock /* descriptor */, false /*isProxyEffect*/);
+    }
+    void TearDown() override {
+        mIEffectMock.reset();
+        mIFactoryMock.reset();
+        mEffect.clear();
+    }
+
+    // Helper function to setDevice with one to multi (window size) device pairs set to effect, and
+    // expect the same from IEffect mocking object.
+    void setDevicesWithWindow(size_t window = 1) {
+        for (size_t i = 0; i + window < kAudioDevicePairs.size(); i += window) {
+            AudioDeviceTypeAddrVector deviceTypes;
+            std::vector<AudioDeviceDescription> deviceDescs;
+            for (size_t w = 0; w < window; w++) {
+                AudioDeviceTypeAddr deviceType(kAudioDevicePairs[i + w].first /* audio_device_t */,
+                                               "");
+                AudioDeviceDescription deviceDesc{
+                        kAudioDevicePairs[i + w].second /* AudioDeviceDescription */};
+                deviceTypes.emplace_back(std::move(deviceType));
+                deviceDescs.emplace_back(std::move(deviceDesc));
+            }
+            const Parameter expect = Parameter::make<Parameter::deviceDescription>(deviceDescs);
+            mIEffectMock->setExpectParameter(expect);
+            EXPECT_EQ(OK, mEffect->setDevices(deviceTypes))
+                    << " setDevices: "
+                    << dumpAudioDeviceTypeAddrVector(deviceTypes, false /*includeSensitiveInfo*/)
+                    << " expect: " << expect.toString();
+        }
+    }
+
+  protected:
+    std::shared_ptr<IEffectMock> mIEffectMock;
+    std::shared_ptr<IFactoryMock> mIFactoryMock;
+    Descriptor mDescMock;
+    sp<EffectHalAidl> mEffect;
+};
+
+TEST_F(EffectHalAidlTest, emptyDeviceSet) {
+    AudioDeviceTypeAddr deviceType(AUDIO_DEVICE_NONE, "");
+    AudioDeviceTypeAddrVector deviceTypes{deviceType};
+    std::vector<AudioDeviceDescription> deviceDescs;
+
+    Parameter expect = Parameter::make<Parameter::deviceDescription>(deviceDescs);
+    mIEffectMock->setExpectParameter(expect);
+    EXPECT_NE(OK, mEffect->setDevices(deviceTypes))
+            << " expecting error with setDevices: "
+            << dumpAudioDeviceTypeAddrVector(deviceTypes, false /*includeSensitiveInfo*/)
+            << " expect: " << expect.toString();
+
+    deviceDescs.emplace_back(AudioDeviceDescription{.type = AudioDeviceType::NONE});
+    expect = Parameter::make<Parameter::deviceDescription>(deviceDescs);
+    mIEffectMock->setExpectParameter(expect);
+    EXPECT_EQ(OK, mEffect->setDevices(deviceTypes))
+            << " setDevices: "
+            << dumpAudioDeviceTypeAddrVector(deviceTypes, false /*includeSensitiveInfo*/)
+            << " expect: " << expect.toString();
+}
+
+// go over the `kAudioDevicePairs` pair, and setDevice for each pair
+TEST_F(EffectHalAidlTest, deviceSinglePairSet) {
+    ASSERT_NO_FATAL_FAILURE(setDevicesWithWindow());
+}
+
+// SetDevice with multiple device pairs from `kAudioDevicePairs`
+TEST_F(EffectHalAidlTest, deviceMultiplePairSet) {
+    for (size_t window = 2; window < kAudioDevicePairs.size(); window++) {
+        ASSERT_NO_FATAL_FAILURE(setDevicesWithWindow(window));
+    }
+}
diff --git a/services/audioflinger/Effects.cpp b/services/audioflinger/Effects.cpp
index 33c3375e21..fb7f5a60ea 100644
--- a/services/audioflinger/Effects.cpp
+++ b/services/audioflinger/Effects.cpp
@@ -1446,6 +1446,11 @@ void EffectChain::setVolumeForOutput_l(uint32_t left, uint32_t right)
 status_t EffectModule::sendSetAudioDevicesCommand(
         const AudioDeviceTypeAddrVector &devices, uint32_t cmdCode)
 {
+    // for AIDL, use setDevices to pass the AudioDeviceTypeAddrVector
+    if (!EffectConfiguration::isHidl()) {
+        return mEffectInterface->setDevices(devices);
+    }
+
     audio_devices_t deviceType = deviceTypesToBitMask(getAudioDeviceTypes(devices));
     if (deviceType == AUDIO_DEVICE_NONE) {
         return NO_ERROR;
-- 
2.34.1

