From 749521fd63e1b878250d394f2b12ef6fbbd0a47d Mon Sep 17 00:00:00 2001
From: Adithya R <gh0strider.2k18.reborn@gmail.com>
Date: Sun, 9 Oct 2022 20:28:56 +0530
Subject: [PATCH 14/16] SF: Bring back support for disabling backpressure
 propagation

[Pulkit077]: Adapt to A14 QPR1
[SamarV-121]: Adapt to A14 QPR3

Taken from CLO (QSSI 13). Some Qualcomm devices can still
benefit from disabling backpressure propagation by setting:

debug.sf.disable_backpressure=1

Signed-off-by: Pulkit077 <pulkitagarwal2k1@gmail.com>
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 .../Scheduler/include/scheduler/Features.h               | 1 +
 .../Scheduler/include/scheduler/FrameTargeter.h          | 4 +++-
 services/surfaceflinger/Scheduler/src/FrameTargeter.cpp  | 4 ++--
 services/surfaceflinger/SurfaceFlinger.cpp               | 9 ++++++++-
 services/surfaceflinger/SurfaceFlinger.h                 | 1 +
 5 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/services/surfaceflinger/Scheduler/include/scheduler/Features.h b/services/surfaceflinger/Scheduler/include/scheduler/Features.h
index 52485fb4e9..6a3d7d082f 100644
--- a/services/surfaceflinger/Scheduler/include/scheduler/Features.h
+++ b/services/surfaceflinger/Scheduler/include/scheduler/Features.h
@@ -30,6 +30,7 @@ enum class Feature : std::uint8_t {
     kBackpressureGpuComposition = 1 << 4,
     kSmallDirtyContentDetection = 1 << 5,
     kExpectedPresentTime = 1 << 6,
+    kPropagateBackpressure = 1 << 7,
 };
 
 using FeatureFlags = ftl::Flags<Feature>;
diff --git a/services/surfaceflinger/Scheduler/include/scheduler/FrameTargeter.h b/services/surfaceflinger/Scheduler/include/scheduler/FrameTargeter.h
index 813d4dedff..90c6599ee6 100644
--- a/services/surfaceflinger/Scheduler/include/scheduler/FrameTargeter.h
+++ b/services/surfaceflinger/Scheduler/include/scheduler/FrameTargeter.h
@@ -128,7 +128,8 @@ public:
     FrameTargeter(PhysicalDisplayId displayId, FeatureFlags flags)
           : FrameTarget(to_string(displayId)),
             mBackpressureGpuComposition(flags.test(Feature::kBackpressureGpuComposition)),
-            mSupportsExpectedPresentTime(flags.test(Feature::kExpectedPresentTime)) {}
+            mSupportsExpectedPresentTime(flags.test(Feature::kExpectedPresentTime)),
+            mPropagateBackpressure(flags.test(Feature::kPropagateBackpressure)) {}
 
     const FrameTarget& target() const { return *this; }
 
@@ -165,6 +166,7 @@ private:
 
     const bool mBackpressureGpuComposition;
     const bool mSupportsExpectedPresentTime;
+    const bool mPropagateBackpressure;
 
     TimePoint mScheduledPresentTime;
     CompositionCoverageFlags mCompositionCoverage;
diff --git a/services/surfaceflinger/Scheduler/src/FrameTargeter.cpp b/services/surfaceflinger/Scheduler/src/FrameTargeter.cpp
index 50199492cb..b6dc1f2185 100644
--- a/services/surfaceflinger/Scheduler/src/FrameTargeter.cpp
+++ b/services/surfaceflinger/Scheduler/src/FrameTargeter.cpp
@@ -136,8 +136,8 @@ void FrameTargeter::beginFrame(const BeginFrameArgs& args, const IVsyncSource& v
     // In cases where the present fence is about to fire, give it a small grace period instead of
     // giving up on the frame.
     const int graceTimeForPresentFenceMs = [&] {
-        const bool considerBackpressure =
-                mBackpressureGpuComposition || !mCompositionCoverage.test(CompositionCoverage::Gpu);
+        const bool considerBackpressure = mPropagateBackpressure &&
+                (mBackpressureGpuComposition || !mCompositionCoverage.test(CompositionCoverage::Gpu));
 
         if (!FlagManager::getInstance().allow_n_vsyncs_in_targeter()) {
             return static_cast<int>(considerBackpressure);
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 5947a43400..ab1adcefac 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -495,6 +495,10 @@ SurfaceFlinger::SurfaceFlinger(Factory& factory) : SurfaceFlinger(factory, SkipI
 
     mDebugFlashDelay = base::GetUintProperty("debug.sf.showupdates"s, 0u);
 
+    property_get("debug.sf.disable_backpressure", value, "0");
+    mPropagateBackpressure = !atoi(value);
+    ALOGI_IF(!mPropagateBackpressure, "Disabling backpressure propagation");
+
     mBackpressureGpuComposition = base::GetBoolProperty("debug.sf.enable_gl_backpressure"s, true);
     ALOGI_IF(mBackpressureGpuComposition, "Enabling backpressure for GPU composition");
 
@@ -2675,7 +2679,7 @@ bool SurfaceFlinger::commit(PhysicalDisplayId pacesetterId,
     }
 
     if (pacesetterFrameTarget.wouldBackpressureHwc()) {
-        if (mBackpressureGpuComposition || pacesetterFrameTarget.didMissHwcFrame()) {
+        if (mPropagateBackpressure && (mBackpressureGpuComposition || pacesetterFrameTarget.didMissHwcFrame())) {
             if (FlagManager::getInstance().vrr_config()) {
                 mScheduler->getVsyncSchedule()->getTracker().onFrameMissed(
                         pacesetterFrameTarget.expectedPresentTime());
@@ -4482,6 +4486,9 @@ void SurfaceFlinger::initScheduler(const sp<const DisplayDevice>& display) {
     if (mBackpressureGpuComposition) {
         features |= Feature::kBackpressureGpuComposition;
     }
+    if (mPropagateBackpressure) {
+        features |= Feature::kPropagateBackpressure;
+    }
     if (getHwComposer().getComposer()->isSupported(
                 Hwc2::Composer::OptionalFeature::ExpectedPresentTime)) {
         features |= Feature::kExpectedPresentTime;
diff --git a/services/surfaceflinger/SurfaceFlinger.h b/services/surfaceflinger/SurfaceFlinger.h
index 44856aef68..957ef0ec6d 100644
--- a/services/surfaceflinger/SurfaceFlinger.h
+++ b/services/surfaceflinger/SurfaceFlinger.h
@@ -1314,6 +1314,7 @@ private:
     std::atomic_bool mForceFullDamage = false;
 
     bool mLayerCachingEnabled = false;
+    bool mPropagateBackpressure = true;
     bool mBackpressureGpuComposition = false;
 
     LayerTracing mLayerTracing;
-- 
2.34.1

