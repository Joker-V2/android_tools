From 284a2623efea0bc531635380f0af9fe60949e291 Mon Sep 17 00:00:00 2001
From: Guruprasad Gaonkar <ggaonk@codeaurora.org>
Date: Thu, 30 Aug 2018 10:24:31 -0700
Subject: [PATCH 13/23] Select the proper request list size

Determine the request list size for high speed session based on
the maxBatch size for that high speed stream configuration.

CRs-Fixed: 2300725
Bug: 113450772
Change-Id: I3ae107596c6dd3362d7c375cf771d7d843d65745
Signed-off-by: Pranav Vashi <neobuddy89@gmail.com>
---
 ...onstrainedHighSpeedCaptureSessionImpl.java | 32 ++++++++++++++++++-
 1 file changed, 31 insertions(+), 1 deletion(-)

diff --git a/core/java/android/hardware/camera2/impl/CameraConstrainedHighSpeedCaptureSessionImpl.java b/core/java/android/hardware/camera2/impl/CameraConstrainedHighSpeedCaptureSessionImpl.java
index 87553d8c42ab..bbac7e379615 100644
--- a/core/java/android/hardware/camera2/impl/CameraConstrainedHighSpeedCaptureSessionImpl.java
+++ b/core/java/android/hardware/camera2/impl/CameraConstrainedHighSpeedCaptureSessionImpl.java
@@ -26,11 +26,13 @@ import android.hardware.camera2.CameraOfflineSession.CameraOfflineSessionCallbac
 import android.hardware.camera2.CaptureRequest;
 import android.hardware.camera2.params.OutputConfiguration;
 import android.hardware.camera2.params.StreamConfigurationMap;
+import android.hardware.camera2.params.HighSpeedVideoConfiguration;
 import android.hardware.camera2.utils.SurfaceUtils;
 import android.os.Handler;
 import android.os.ConditionVariable;
 import android.util.Range;
 import android.util.Log;
+import android.util.Size;
 import android.view.Surface;
 
 import java.util.ArrayList;
@@ -118,7 +120,7 @@ public class CameraConstrainedHighSpeedCaptureSessionImpl
         }
         Log.v(TAG, "previewFps: " + previewFps);
 
-        int requestListSize = fpsRange.getUpper() / previewFps;
+        int requestListSize = getHighSpeedRequestListSize(fpsRange, outputSurfaces);
         // If it's a preview, keep requestList size fixed = 1.
         if (fpsRange.getUpper() > fpsRange.getLower()) {
             requestListSize = 1;
@@ -203,6 +205,34 @@ public class CameraConstrainedHighSpeedCaptureSessionImpl
         return true;
     }
 
+    private int getHighSpeedRequestListSize(Range<Integer> fpsRange, Collection<Surface> surfaces) {
+        int requestListSize = 0;
+
+        for (Surface surface : surfaces) {
+
+            if (SurfaceUtils.isSurfaceForHwVideoEncoder(surface)) {
+                Size surfaceSize = SurfaceUtils.getSurfaceSize(surface);
+                HighSpeedVideoConfiguration[] highSpeedVideoConfigurations =
+                    mCharacteristics.get(CameraCharacteristics.CONTROL_AVAILABLE_HIGH_SPEED_VIDEO_CONFIGURATIONS);
+
+                // Get the batchsize for matching FPS & video size
+                for (HighSpeedVideoConfiguration config : highSpeedVideoConfigurations) {
+                    if (config.getSize().equals(surfaceSize) && config.getFpsRange().equals(fpsRange)) {
+                        requestListSize = config.getBatchSizeMax();
+                        break;
+                     }
+                }
+                break;
+            }
+        }
+
+        if (requestListSize == 0) {
+            // If cant' find the matching batch size,  limit the preview to 30fps.
+            requestListSize = fpsRange.getUpper() / 30;
+        }
+        return requestListSize;
+    }
+
     @Override
     public CameraDevice getDevice() {
         return mSessionImpl.getDevice();
-- 
2.34.1

